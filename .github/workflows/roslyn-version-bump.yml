name: Roslyn Version Bump

on:
  schedule:
    - cron: '0 9 * * *'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  bump:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 9.0.x

      - name: Install roslyn-tools
        run: |
          FEED="https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng/nuget/v3/index.json"
          dotnet tool install -g Microsoft.RoslynTools --prerelease --add-source "$FEED"
          echo "$HOME/.dotnet/tools" >> "$GITHUB_PATH"

      - name: Clone roslyn & set hardcoded range
        id: range
        run: |
          set -euo pipefail
          git clone --no-tags --filter=blob:none --depth 500 https://github.com/dotnet/roslyn.git roslyn
          # Hardcoded commit range per request
          START=498e8d399b4911bdaec79664651ca29aaf2a66b9
          END=7c7cfd9c3fee9f3be48c1f8b7f1d139cfb3f5942
          echo "Using hardcoded start: $START"
          echo "Using hardcoded end:   $END"
          echo "start=$START" >> $GITHUB_OUTPUT
          echo "end=$END" >> $GITHUB_OUTPUT
          if [ "$START" = "$END" ]; then echo "no_change=true" >> $GITHUB_OUTPUT; fi

      - name: Determine Roslyn version
        id: rver
        if: steps.range.outputs.no_change != 'true'
        run: |
          set -euo pipefail
          pushd roslyn >/dev/null
          VER=""
          echo "Attempting to detect Roslyn version..."
          if [ -f eng/Version.Details.xml ]; then
            echo "Found eng/Version.Details.xml"
            grep -i 'Microsoft.CodeAnalysis.Common' eng/Version.Details.xml || true
            VER=$(grep -i 'Microsoft.CodeAnalysis.Common' eng/Version.Details.xml | grep -oE 'Version="[^"]+' | head -n1 | cut -d '"' -f2 || true)
          fi
          if [ -z "$VER" ] && [ -f eng/Versions.props ]; then
            echo "Trying eng/Versions.props"
            sed -n 's:.*<MicrosoftCodeAnalysisVersion>\\([^<]*\\)</MicrosoftCodeAnalysisVersion>.*:\1:p' eng/Versions.props | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' || true
            VER=$(sed -n 's:.*<MicrosoftCodeAnalysisVersion>\\([^<]*\\)</MicrosoftCodeAnalysisVersion>.*:\1:p' eng/Versions.props | head -n1 | tr -d '[:space:]' || true)
          fi
          if [ -z "$VER" ] && [ -f Directory.Packages.props ]; then
            echo "Trying Directory.Packages.props"
            VER=$(grep -oP 'Include="Microsoft.CodeAnalysis.Common"[^>]*Version="\K[^" ]+' Directory.Packages.props | head -n1 || true)
          fi
          if [ -z "$VER" ] && [ -f build/Targets/Packages.props ]; then
            echo "Trying build/Targets/Packages.props"
            VER=$(grep -oP 'Microsoft.CodeAnalysis.Common" Version="\K[^" ]+' build/Targets/Packages.props | head -n1 || true)
          fi
          if [ -z "$VER" ]; then
            echo "Fallback: searching repository (may be noisy)" >&2
            VER=$(grep -R "Microsoft.CodeAnalysis.Common" -n . | grep -oE 'Version=\"[^\"]+' | cut -d '"' -f2 | head -n1 || true)
          fi
          echo "Detected version: ${VER:-<none>}"
          popd >/dev/null
          [ -z "$VER" ] && VER=unknown
          echo "roslyn=$VER" >> $GITHUB_OUTPUT

      - name: Auth settings
        if: steps.range.outputs.no_change != 'true'
        run: |
          set -euo pipefail
          mkdir -p "$HOME/.roslyn-tools"
          JSON=$(printf '{"GitHubToken":"%s","DevDivAzureDevOpsToken":"","DncEngAzureDevOpsToken":""}' "${{ secrets.GITHUB_TOKEN }}")
          printf '%s' "$JSON" | base64 | tr -d '\n' > "$HOME/.roslyn-tools/settings"
          echo "Auth settings file created at $HOME/.roslyn-tools/settings"

      - name: Generate PR list
        id: prs
        if: steps.range.outputs.no_change != 'true'
        run: |
          set -euo pipefail
          pushd roslyn >/dev/null
          if OUTPUT=$(roslyn-tools pr-finder -s "${{ steps.range.outputs.start }}" -e "${{ steps.range.outputs.end }}" --format changelog 2>/dev/null); then
            [ -z "$OUTPUT" ] && echo "(no PRs)" > ../pr-changelog.txt || printf "%s\n" "$OUTPUT" > ../pr-changelog.txt
          else
            echo "(pr-finder failed)" > ../pr-changelog.txt
          fi
          popd >/dev/null
          cat pr-changelog.txt
          if grep -qE '^\((no PRs|pr-finder failed)\)$' pr-changelog.txt; then echo "empty=true" >> $GITHUB_OUTPUT; fi

      - name: Update CHANGELOG & package.json (Roslyn bump pattern)
        id: update
        if: steps.range.outputs.no_change != 'true'
        uses: actions/github-script@v7
        env:
          ROSLYN_VER: ${{ steps.rver.outputs.roslyn }}
          START_SHA: ${{ steps.range.outputs.start }}
          END_SHA: ${{ steps.range.outputs.end }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const roslynVer = process.env.ROSLYN_VER || 'unknown';
            let pkgUpdated = false;
            if (fs.existsSync('package.json') && roslynVer !== 'unknown') {
              const pkg = JSON.parse(fs.readFileSync('package.json','utf8'));
              if (!pkg.defaults) pkg.defaults = {};
              if (pkg.defaults.roslyn !== roslynVer) {
                core.info(`Updating defaults.roslyn: ${pkg.defaults.roslyn} -> ${roslynVer}`);
                pkg.defaults.roslyn = roslynVer;
                fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
                pkgUpdated = true;
              } else {
                core.info('defaults.roslyn unchanged');
              }
            }
            const prFile = 'pr-changelog.txt';
            let prLines = [];
            if (fs.existsSync(prFile)) {
              const raw = fs.readFileSync(prFile,'utf8').split(/\r?\n/).filter(l=>l.trim());
              for (const line of raw) {
                if (/^\((no PRs|pr-finder failed)\)$/.test(line)) continue; // skip sentinel
                // Normalize to leading *
                let norm = line.startsWith('*') ? line : `* ${line}`;
                const m = norm.match(/\(#(\d+)\)/);
                if (m) {
                  const num = m[1];
                  // Extract title without trailing (#num)
                  const title = norm.replace(/^\*\s*/,'').replace(/\s*\(#\d+\).*$/,'');
                  norm = `* ${title} (PR: [#${num}](https://github.com/dotnet/roslyn/pull/${num}))`;
                }
                prLines.push(norm);
              }
            }
            // De-duplicate while preserving order
            const seen = new Set();
            prLines = prLines.filter(l => { if (seen.has(l)) return false; seen.add(l); return true; });
            const CHANGELOG = 'CHANGELOG.md';
            let changelog = fs.existsSync(CHANGELOG) ? fs.readFileSync(CHANGELOG,'utf8') : '# 2.x.x\n\n';
            const headerRegex = /^# 2\..*$/m;
            let match = changelog.match(headerRegex);
            if (!match) {
              changelog = '# 2.x.x\n\n' + changelog;
              match = changelog.match(headerRegex);
            }
            const headerLine = match[0];
            const startIdx = changelog.indexOf(headerLine);
            let endIdx = changelog.indexOf('\n# ', startIdx + headerLine.length);
            if (endIdx === -1) endIdx = changelog.length;
            let section = changelog.substring(startIdx, endIdx);
            section = section.split(/\n/).filter(l => !/^\* Bump Roslyn to /.test(l)).join('\n');
            const bumpLine = roslynVer === 'unknown'
              ? '* Bump Roslyn (version unresolved) (PR: [#ROSLYN_PR_NUMBER_PLACEHOLDER](ROSLYN_PR_URL_PLACEHOLDER))'
              : `* Bump Roslyn to ${roslynVer} (PR: [#ROSLYN_PR_NUMBER_PLACEHOLDER](ROSLYN_PR_URL_PLACEHOLDER))`;
            const lines = section.split(/\n/);
            const headerIndex = lines.findIndex(l => l.trim() === headerLine.trim());
            if (headerIndex !== -1) {
              lines.splice(headerIndex + 1, 0, bumpLine);
              if (prLines.length) {
                lines.splice(headerIndex + 2, 0, ...prLines);
              }
            } else {
              lines.unshift(bumpLine, ...prLines);
            }
            section = lines.join('\n');
            const newChangelog = changelog.substring(0, startIdx) + section + changelog.substring(endIdx);
            fs.writeFileSync(CHANGELOG, newChangelog.replace(/\n{3,}/g,'\n\n'));
            core.setOutput('pkg_updated', String(pkgUpdated));

      - name: Create PR
        if: steps.range.outputs.no_change != 'true'
        id: cpr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: roslyn-changes/${{ steps.range.outputs.end }}
          commit-message: "Roslyn changes: ${{ steps.range.outputs.start }}...${{ steps.range.outputs.end }}"
          title: "Roslyn changes: ${{ steps.range.outputs.end }}"
          add-paths: |
            CHANGELOG.md
            package.json
          body: |
            Automated Roslyn update.
            Range: `${{ steps.range.outputs.start }}` ... `${{ steps.range.outputs.end }}`.
            See CHANGELOG.md.
      - name: Backfill PR link in CHANGELOG
        if: steps.cpr.outputs.pull-request-number && steps.range.outputs.no_change != 'true'
        run: |
          set -euo pipefail
          PR_URL="${{ steps.cpr.outputs.pull-request-url }}"
          PR_NUM="${{ steps.cpr.outputs.pull-request-number }}"
          BRANCH="roslyn-changes/${{ steps.range.outputs.end }}"
          git fetch origin "$BRANCH" --depth=1
          git checkout "$BRANCH"
          sed -i "0,/ROSLYN_PR_NUMBER_PLACEHOLDER/{s/ROSLYN_PR_NUMBER_PLACEHOLDER/$PR_NUM/}" CHANGELOG.md
          sed -i "0,/ROSLYN_PR_URL_PLACEHOLDER/{s|ROSLYN_PR_URL_PLACEHOLDER|$PR_URL|}" CHANGELOG.md
          if git diff --quiet; then
            echo "No placeholder replacement occurred."; exit 0; fi
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add CHANGELOG.md package.json || true
          git commit -m "Backfill PR link #$PR_NUM"
          git push origin "$BRANCH"