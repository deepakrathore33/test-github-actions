name: Roslyn Version Bump

on:
  schedule:
    - cron: '0 9 * * *'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  bump:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 9.0.x

      - name: Install roslyn-tools
        shell: bash
        run: |
          FEED="https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng/nuget/v3/index.json"
          dotnet tool install -g Microsoft.RoslynTools --prerelease --add-source "$FEED"
          echo "$HOME/.dotnet/tools" >> "$GITHUB_PATH"

      - name: Clone roslyn & set hardcoded range
        id: range
        shell: bash
        run: |
          set -euo pipefail
          git clone --no-tags --filter=blob:none --depth 500 https://github.com/dotnet/roslyn.git roslyn
          
          # Hardcoded commit range per request
          START=498e8d399b4911bdaec79664651ca29aaf2a66b9
          END=7c7cfd9c3fee9f3be48c1f8b7f1d139cfb3f5942
          
          echo "Using hardcoded start: $START"
          echo "Using hardcoded end:   $END"
          
          echo "start=$START" >> $GITHUB_OUTPUT
          echo "end=$END" >> $GITHUB_OUTPUT
          
          if [ "$START" = "$END" ]; then 
            echo "no_change=true" >> $GITHUB_OUTPUT
          fi

      - name: Auth settings
        if: steps.range.outputs.no_change != 'true'
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$HOME/.roslyn-tools"
          
          JSON=$(printf '{"GitHubToken":"%s","DevDivAzureDevOpsToken":"","DncEngAzureDevOpsToken":""}' "${{ secrets.GITHUB_TOKEN }}")
          printf '%s' "$JSON" | base64 | tr -d '\n' > "$HOME/.roslyn-tools/settings"
          
          echo "Auth settings file created at $HOME/.roslyn-tools/settings"

      - name: Determine Roslyn version from changes
        id: rver
        if: steps.range.outputs.no_change != 'true'
        shell: bash
        run: |
          set -euo pipefail
          pushd roslyn >/dev/null
          
          VER=""
          echo "Attempting to detect Roslyn version from commit range..."
          
          # Checkout the END commit to get the latest version
          git checkout "${{ steps.range.outputs.end }}" >/dev/null 2>&1
          
          # Primary method: Check eng/Version.Details.xml for Microsoft.CodeAnalysis.Common
          if [ -f eng/Version.Details.xml ] && [ -z "$VER" ]; then
            echo "Checking eng/Version.Details.xml for Microsoft.CodeAnalysis.Common"
            VER=$(xmllint --xpath "//Dependency[@Name='Microsoft.CodeAnalysis.Common']/@Version" eng/Version.Details.xml 2>/dev/null | sed 's/Version="//' | sed 's/"//' || true)
            if [ -z "$VER" ]; then
              # Fallback: use grep if xmllint not available
              VER=$(grep -A1 -B1 'Microsoft.CodeAnalysis.Common' eng/Version.Details.xml | grep 'Version=' | grep -oE 'Version="[^"]+' | cut -d '"' -f2 | head -n1 || true)
            fi
          fi
          
          # Secondary method: Check eng/Versions.props
          if [ -f eng/Versions.props ] && [ -z "$VER" ]; then
            echo "Checking eng/Versions.props for MicrosoftCodeAnalysisVersion"
            VER=$(grep -oP '<MicrosoftCodeAnalysisVersion>\K[^<]+' eng/Versions.props | head -n1 || true)
          fi
          
          # Tertiary method: Check Directory.Packages.props 
          if [ -f Directory.Packages.props ] && [ -z "$VER" ]; then
            echo "Checking Directory.Packages.props for Microsoft.CodeAnalysis.Common"
            VER=$(grep 'Microsoft.CodeAnalysis.Common' Directory.Packages.props | grep -oP 'Version="\K[^"]+' | head -n1 || true)
          fi
          
          # Final fallback: Search git log for version bump commits
          if [ -z "$VER" ]; then
            echo "Fallback: searching commit messages for version patterns"
            VER=$(git log --oneline "${{ steps.range.outputs.start }}..${{ steps.range.outputs.end }}" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+-[0-9]+\.[0-9]+\.[0-9]+' | head -n1 || true)
          fi
          
          echo "Detected Roslyn version: ${VER:-unknown}"
          popd >/dev/null
          
          [ -z "$VER" ] && VER=unknown
          echo "roslyn=$VER" >> $GITHUB_OUTPUT

      - name: Generate PR list
        id: prs
        if: steps.range.outputs.no_change != 'true'
        shell: bash
        run: |
          set -euo pipefail
          pushd roslyn >/dev/null
          
          if OUTPUT=$(roslyn-tools pr-finder -s "${{ steps.range.outputs.start }}" -e "${{ steps.range.outputs.end }}" --format changelog 2>/dev/null); then
            if [ -z "$OUTPUT" ]; then
              echo "(no PRs)" > ../pr-changelog.txt
            else
              printf "%s\n" "$OUTPUT" > ../pr-changelog.txt
            fi
          else
            echo "(pr-finder failed)" > ../pr-changelog.txt
          fi
          
          popd >/dev/null
          cat pr-changelog.txt
          
          if grep -qE '^\((no PRs|pr-finder failed)\)$' pr-changelog.txt; then 
            echo "empty=true" >> $GITHUB_OUTPUT
          fi

      - name: Update CHANGELOG
        id: update
        if: steps.range.outputs.no_change != 'true'
        uses: actions/github-script@v7
        env:
          ROSLYN_VER: ${{ steps.rver.outputs.roslyn }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { readFile, writeFile, access } = require('fs/promises');
            const { constants } = require('fs');
            
            const CHANGELOG = 'CHANGELOG.md';
            const PR_FILE = 'pr-changelog.txt';
            const roslynVer = process.env.ROSLYN_VER || 'unknown';
            
            core.info(`Updating CHANGELOG.md with Roslyn changes (version: ${roslynVer})`);
            
            try {
              // Update package.json first (like the manual PRs do)
              let pkgUpdated = false;
              if (roslynVer !== 'unknown') {
                try {
                  const pkg = JSON.parse(await readFile('package.json', 'utf8'));
                  if (!pkg.defaults) pkg.defaults = {};
                  
                  const oldVersion = pkg.defaults.roslyn;
                  if (pkg.defaults.roslyn !== roslynVer) {
                    core.info(`Updating package.json defaults.roslyn: ${oldVersion} -> ${roslynVer}`);
                    pkg.defaults.roslyn = roslynVer;
                    await writeFile('package.json', JSON.stringify(pkg, null, 2) + '\n');
                    pkgUpdated = true;
                  } else {
                    core.info('package.json defaults.roslyn already up to date');
                  }
                } catch (err) {
                  core.warning(`Could not update package.json: ${err.message}`);
                }
              }
              
              // Load pr-finder output and filter out diff link
              let prLines = [];
              try {
                await access(PR_FILE, constants.F_OK);
                const prContent = await readFile(PR_FILE, 'utf8');
                prLines = prContent
                  .split(/\r?\n/)
                  .map(l => l.trim())
                  .filter(l => l.length && !l.includes('[View Complete Diff of Changes]'))
                  .map(l => l.startsWith('*') ? `  ${l}` : `  * ${l}`); // Convert to sub-bullets
                core.info(`Found ${prLines.length} PR entries to add`);
              } catch (err) {
                core.warning(`Could not read ${PR_FILE}: ${err.message}`);
              }
              
              // Read existing changelog
              let content;
              try {
                content = await readFile(CHANGELOG, 'utf8');
              } catch (err) {
                core.setFailed('CHANGELOG.md not found');
                return;
              }
              
              // Find the existing bump line pattern in the first # section
              const lines = content.split(/\r?\n/);
              let bumpLineIndex = -1;
              let firstHeaderIndex = -1;
              
              // Find the first # header
              for (let i = 0; i < lines.length; i++) {
                if (/^# /.test(lines[i])) {
                  firstHeaderIndex = i;
                  break;
                }
              }
              
              if (firstHeaderIndex === -1) {
                core.setFailed('Could not find any # header in CHANGELOG.md');
                return;
              }
              
              // Find the next # header to determine the end of the first section
              let sectionEndIndex = lines.length;
              for (let i = firstHeaderIndex + 1; i < lines.length; i++) {
                if (/^# /.test(lines[i])) {
                  sectionEndIndex = i;
                  break;
                }
              }
              
              // Look for "Bump Roslyn" line within the first section
              for (let i = firstHeaderIndex + 1; i < sectionEndIndex; i++) {
                if (/^\* Bump Roslyn to .* \(PR:/.test(lines[i])) {
                  bumpLineIndex = i;
                  break;
                }
              }
              
              if (bumpLineIndex === -1) {
                core.setFailed('Could not find existing Roslyn bump line in the first section');
                return;
              }
              
              // Replace the existing bump line with detected version or placeholder
              const bumpLine = roslynVer === 'unknown' 
                ? '* Bump Roslyn (version unresolved) (PR: [#ROSLYN_PR_NUMBER_PLACEHOLDER](ROSLYN_PR_URL_PLACEHOLDER))'
                : `* Bump Roslyn to ${roslynVer} (PR: [#ROSLYN_PR_NUMBER_PLACEHOLDER](ROSLYN_PR_URL_PLACEHOLDER))`;
              
              lines[bumpLineIndex] = bumpLine;
              
              // Find where existing sub-bullets end (don't remove them, just find the insertion point)
              let insertionPoint = bumpLineIndex + 1;
              while (insertionPoint < lines.length && lines[insertionPoint].startsWith('  *')) {
                insertionPoint++;
              }
              
              // Insert new PR lines after existing sub-bullets
              if (prLines.length > 0) {
                lines.splice(insertionPoint, 0, ...prLines);
              }
              
              const finalText = lines.join('\n');
              await writeFile(CHANGELOG, finalText);
              core.info('Successfully updated CHANGELOG.md');
              
            } catch (err) {
              core.setFailed(`Error updating changelog: ${err?.message ?? err}`);
            }

      - name: Create PR
        if: steps.range.outputs.no_change != 'true'
        id: cpr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: roslyn-changes/${{ steps.range.outputs.end }}
          commit-message: "Roslyn changes: ${{ steps.range.outputs.start }}...${{ steps.range.outputs.end }}"
          title: "Roslyn changes: ${{ steps.range.outputs.end }}"
          add-paths: |
            CHANGELOG.md
            package.json
          body: |
            Automated Roslyn update.
            Range: `${{ steps.range.outputs.start }}` ... `${{ steps.range.outputs.end }}`.
            See CHANGELOG.md.

      - name: Backfill PR link in CHANGELOG
        if: steps.cpr.outputs.pull-request-number && steps.range.outputs.no_change != 'true'
        shell: bash
        run: |
          set -euo pipefail
          
          PR_URL="${{ steps.cpr.outputs.pull-request-url }}"
          PR_NUM="${{ steps.cpr.outputs.pull-request-number }}"
          BRANCH="roslyn-changes/${{ steps.range.outputs.end }}"
          
          git fetch origin "$BRANCH" --depth=1
          git checkout "$BRANCH"
          
          sed -i "0,/ROSLYN_PR_NUMBER_PLACEHOLDER/s/ROSLYN_PR_NUMBER_PLACEHOLDER/$PR_NUM/" CHANGELOG.md
          sed -i "0,/ROSLYN_PR_URL_PLACEHOLDER/s|ROSLYN_PR_URL_PLACEHOLDER|$PR_URL|" CHANGELOG.md
          
          if git diff --quiet; then
            echo "No placeholder replacement occurred."
            exit 0
          fi
          
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add CHANGELOG.md package.json || true
          git commit -m "Backfill PR link #$PR_NUM"
          git push origin "$BRANCH"