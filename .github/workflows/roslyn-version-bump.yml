name: Automated Roslyn Version Bump

on:
  workflow_dispatch:
    inputs:
      toolVersion:
        description: 'Microsoft.RoslynTools version to use (leave blank for latest prerelease)'
        required: false
        type: string
jobs:
  bump-roslyn:
    runs-on: ubuntu-latest
    env:
      TOOL_VERSION: ${{ inputs.toolVersion }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: .NET environment diagnostics
        run: |
          dotnet --info || true
          echo "Initial global tool list:" 
          dotnet tool list -g || true
          echo "Workspace root: $(pwd)"

      - name: Install Microsoft.RoslynTools (attempt global then local) 
        id: install_tool
        run: |
          set -euo pipefail
          echo "Requested TOOL_VERSION: '${TOOL_VERSION:-}'"
          VERSION_ARG="--prerelease"
          if [ -n "${TOOL_VERSION:-}" ]; then VERSION_ARG="--version ${TOOL_VERSION}"; fi
          echo "Using VERSION_ARG=$VERSION_ARG"
          echo "Uninstalling any existing global tool (ignore errors)"
          dotnet tool uninstall -g Microsoft.RoslynTools || true
          echo "Attempting global install..."
          if dotnet tool install -g Microsoft.RoslynTools $VERSION_ARG --add-source https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng/nuget/v3/index.json; then
            echo "Global install succeeded." 
            echo "$HOME/.dotnet/tools" >> "$GITHUB_PATH"
            echo "mode=global" >> "$GITHUB_OUTPUT"
            echo "Global tools list after install:" 
            dotnet tool list -g || true
            which roslyn-tools || true
          else
            echo "Global install FAILED. Falling back to local --tool-path install." >&2
            rm -rf .config/dotnet-tools
            mkdir -p .config/dotnet-tools
            if dotnet tool install Microsoft.RoslynTools $VERSION_ARG --add-source https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng/nuget/v3/index.json --tool-path ./.config/dotnet-tools; then
              echo "Local install succeeded." 
              echo "mode=local" >> "$GITHUB_OUTPUT"
              ls -l .config/dotnet-tools || true
            else
              echo "Both global and local installs FAILED. Exiting." >&2
              exit 1
            fi
          fi
          echo "Installation step complete. Mode: $(grep mode= "$GITHUB_OUTPUT" || true)"

      - name: Log directory structure after tool install
        run: |
          echo "Root directory after tool install:"; pwd; ls -l
          echo "Home dotnet tools dir:"; ls -l "$HOME/.dotnet/tools" 2>/dev/null || echo "(no global tools dir)"
          echo ".config/dotnet-tools dir:"; ls -l .config/dotnet-tools 2>/dev/null || echo "(no local tool-path dir)"

      - name: Load last Roslyn SHA
        id: load_sha
        run: |
          if [ -f .github/roslyn-last-sha.txt ]; then
            echo "last_sha=$(cat .github/roslyn-last-sha.txt)" >> $GITHUB_OUTPUT
          else
            echo "last_sha=0000000000000000000000000000000000000000" >> $GITHUB_OUTPUT
          fi

      - name: Get latest Roslyn SHA
        id: get_latest_sha
        run: |
          git clone --depth 1 https://github.com/dotnet/roslyn.git roslyn-temp
          echo "Root directory after git clone:"
          pwd
          ls -l
          echo "roslyn-temp directory:"
          ls -l roslyn-temp
          cd roslyn-temp
          echo "latest_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Check if update needed
        id: check_update
        run: |
          if [ "${{ steps.load_sha.outputs.last_sha }}" = "${{ steps.get_latest_sha.outputs.latest_sha }}" ]; then
            echo "update_needed=false" >> $GITHUB_OUTPUT
          else
            echo "update_needed=true" >> $GITHUB_OUTPUT
          fi

      - name: Log directory structure before running pr-finder
        if: steps.check_update.outputs.update_needed == 'true'
        run: |
          echo "Root directory before running pr-finder:"
          pwd
          ls -l
          echo ".config/dotnet-tools directory:"
          ls -l .config/dotnet-tools
          echo "roslyn-temp directory:"
          ls -l roslyn-temp

      - name: Run pr-finder
        if: steps.check_update.outputs.update_needed == 'true'
        env:
          LAST_SHA: ${{ steps.load_sha.outputs.last_sha }}
          LATEST_SHA: ${{ steps.get_latest_sha.outputs.latest_sha }}
          INSTALL_MODE: ${{ steps.install_tool.outputs.mode }}
        run: |
          set -euo pipefail
          echo "Install mode: ${INSTALL_MODE:-unknown}"
          if [ "${INSTALL_MODE:-}" = "global" ]; then
            TOOL_CMD="roslyn-tools"
          else
            TOOL_CMD="./.config/dotnet-tools/dotnet-roslyn-tools"
          fi
          echo "Using TOOL_CMD=$TOOL_CMD"
          ls -l "$TOOL_CMD" 2>/dev/null || true
          $TOOL_CMD pr-finder \
            -s "$LAST_SHA" \
            -e "$LATEST_SHA" \
            --label changelog-worthy \
            --format changelog > changelog.txt

      - name: Update CHANGELOG.md
        if: steps.check_update.outputs.update_needed == 'true'
        env:
          LATEST_SHA: ${{ steps.get_latest_sha.outputs.latest_sha }}
        run: |
          echo "* Bump Roslyn to $LATEST_SHA" > header.txt
          cat header.txt changelog.txt CHANGELOG.md > updated.md
          mv updated.md CHANGELOG.md

      - name: Update package.json
        if: steps.check_update.outputs.update_needed == 'true'
        env:
          LATEST_SHA: ${{ steps.get_latest_sha.outputs.latest_sha }}
        run: |
          jq --arg sha "$LATEST_SHA" '.defaults.roslyn = $sha' package.json > tmp.json && mv tmp.json package.json

      - name: Run CI validation
        if: steps.check_update.outputs.update_needed == 'true'
        run: |
          npm install
          npm test

      - name: Commit changes
        if: steps.check_update.outputs.update_needed == 'true'
        env:
          LATEST_SHA: ${{ steps.get_latest_sha.outputs.latest_sha }}
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git checkout -b roslyn-auto-update
          git add CHANGELOG.md package.json
          git commit -m "Automated Roslyn version bump to $LATEST_SHA"

      - name: Create Pull Request
        if: steps.check_update.outputs.update_needed == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "Automated Roslyn Version Bump"
          body: |
            This PR updates the Roslyn version to `${{ steps.get_latest_sha.outputs.latest_sha }}` and includes changelog entries from PRs labeled `changelog-worthy`.
          branch: roslyn-auto-update
          commit-message: "Automated Roslyn version bump to ${{ steps.get_latest_sha.outputs.latest_sha }}"

      - name: Save latest SHA
        if: steps.check_update.outputs.update_needed == 'true'
        env:
          LATEST_SHA: ${{ steps.get_latest_sha.outputs.latest_sha }}
        run: echo "$LATEST_SHA" > .github/roslyn-last-sha.txt