name: Roslyn Version Bump

on:
  schedule:
    - cron: '0 9 * * *'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  bump:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 9.0.x

      - name: Install roslyn-tools
        run: |
          FEED="https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng/nuget/v3/index.json"
          dotnet tool install -g Microsoft.RoslynTools --prerelease --add-source "$FEED"
          echo "$HOME/.dotnet/tools" >> "$GITHUB_PATH"

      - name: Determine latest Roslyn package version
        id: version
        run: |
            set -euo pipefail
            URL="https://api.nuget.org/v3-flatcontainer/microsoft.codeanalysis.common/index.json"
            RAW=$(curl -fsSL "$URL" || true)
            if [ -z "$RAW" ]; then echo "up_to_date=true" >> $GITHUB_OUTPUT; exit 0; fi
            if command -v jq >/dev/null 2>&1; then
              LATEST=$(printf '%s' "$RAW" | jq -r '.versions[]' | sort -u -V | tail -n1)
            else
              LATEST=$(printf '%s' "$RAW" | grep -o '"[0-9][^"]*"' | tr -d '"' | sort -u -V | tail -n1)
            fi
            [ -z "$LATEST" ] && { echo "up_to_date=true" >> $GITHUB_OUTPUT; exit 0; }
            CURRENT=$(grep -oE '"roslyn"[[:space:]]*:[[:space:]]*"[^"]+"' package.json | head -n1 | sed -E 's/.*"roslyn"[[:space:]]*:[[:space:]]*"([^"]+)".*/\1/' || true)
            echo "latest=$LATEST" >> $GITHUB_OUTPUT
            if [ -n "$CURRENT" ]; then echo "current=$CURRENT" >> $GITHUB_OUTPUT; fi
            if [ "$LATEST" = "$CURRENT" ]; then echo "up_to_date=true" >> $GITHUB_OUTPUT; fi
            echo "Latest: $LATEST Current: ${CURRENT:-<none>}"

      - name: Stop if version already current
        if: steps.version.outputs.up_to_date == 'true'
        run: echo "No new Roslyn version published."

      - name: Clone roslyn and pick commit range
        if: steps.version.outputs.up_to_date != 'true'
        id: sha
        run: |
            set -euo pipefail
            git clone --no-tags --depth 50 https://github.com/dotnet/roslyn.git roslyn
            END=$(git -C roslyn rev-parse HEAD)
            if [ -f .github/roslyn-last-sha.txt ]; then
              START=$(cat .github/roslyn-last-sha.txt)
              echo "Using stored start commit: $START"
            else
              START=$(git -C roslyn rev-list --max-count=2 HEAD | tail -n1 || git -C roslyn rev-parse HEAD)
              echo "Derived start commit: $START"
            fi
            echo "start=$START" >> $GITHUB_OUTPUT
            echo "end=$END" >> $GITHUB_OUTPUT
            echo "End commit: $END"

      - name: Auth settings
        if: steps.version.outputs.up_to_date != 'true'
        run: |
            mkdir -p $HOME/.roslyn-tools
            JSON=$(printf '{"GitHubToken":"%s","DevDivAzureDevOpsToken":"","DncEngAzureDevOpsToken":""}' "${{ secrets.GITHUB_TOKEN }}")
            printf '%s' "$JSON" | base64 | tr -d '\n' > $HOME/.roslyn-tools/settings

      - name: Generate PR list (label filtered)
        if: steps.version.outputs.up_to_date != 'true'
        id: changelog
        env:
          LABEL: vscode
        run: |
            set -euo pipefail
            roslyn-tools pr-finder -s "${{ steps.sha.outputs.start }}" -e "${{ steps.sha.outputs.end }}" --label "$LABEL" --format changelog > pr-changelog.txt || echo "(pr-finder failed)" > pr-changelog.txt

      - name: Update package.json version
        if: steps.version.outputs.up_to_date != 'true'
        run: |
            set -euo pipefail
            NEW="${{ steps.version.outputs.latest }}"
            if ! command -v jq >/dev/null 2>&1; then echo "jq is required for safe JSON edit" >&2; exit 1; fi
            TMP=$(mktemp)
            jq --arg v "$NEW" '(.defaults // {}) as $d | .defaults = ($d + {roslyn:$v})' package.json > "$TMP" && mv "$TMP" package.json
            grep -n '"roslyn"' package.json || true

      - name: Update CHANGELOG
        if: steps.version.outputs.up_to_date != 'true'
        run: |
            set -euo pipefail
            NEW="${{ steps.version.outputs.latest }}"
            DATE=$(date -u +%Y-%m-%d)
            HEADER="### Roslyn bump ${NEW} (${DATE})"
            { echo "$HEADER"; echo; echo "* Bump Roslyn to ${NEW}"; echo; cat pr-changelog.txt; echo; } | cat - CHANGELOG.md 2>/dev/null > _tmp && mv _tmp CHANGELOG.md
            echo "Changelog updated."

      - name: Store last processed commit
        if: steps.version.outputs.up_to_date != 'true'
        run: echo "${{ steps.sha.outputs.end }}" > .github/roslyn-last-sha.txt

      - name: Cleanup clone
        if: steps.version.outputs.up_to_date != 'true'
        run: rm -rf roslyn || true

      - name: Create PR
        if: steps.version.outputs.up_to_date != 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: roslyn-bump/${{ steps.version.outputs.latest }}
          commit-message: "Bump Roslyn to ${{ steps.version.outputs.latest }}"
          title: "Bump Roslyn to ${{ steps.version.outputs.latest }}"
          body: |
            Automated Roslyn version bump to `${{ steps.version.outputs.latest }}`.
            Commit range: `${{ steps.sha.outputs.start }}` ... `${{ steps.sha.outputs.end }}`.
            Filter label: vscode
            See CHANGELOG.md for included PRs.