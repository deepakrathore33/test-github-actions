name: Roslyn Version Bump

on:
  schedule:
    - cron: '0 9 * * *'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  bump:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 9.0.x

      - name: Install tools
        shell: bash
        run: |
          # Install roslyn-tools
          FEED="https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng/nuget/v3/index.json"
          dotnet tool install -g Microsoft.RoslynTools --prerelease --add-source "$FEED"
          echo "$HOME/.dotnet/tools" >> "$GITHUB_PATH"
          
          # Install jq for JSON parsing
          sudo apt-get update && sudo apt-get install -y jq

      - name: Get current Roslyn SHA from package
        id: current
        shell: bash
        run: |
          set -euo pipefail
          
          # Read current version from package.json
          CURRENT_VERSION=$(jq -r '.defaults.roslyn // empty' package.json)
          
          # Download the NuGet package and extract commit SHA from .nuspec file
          TEMP_DIR=$(mktemp -d)
          cd "$TEMP_DIR"
          
          # The package name used in vscode-csharp
          PACKAGE_NAME="microsoft.codeanalysis.common"
          DOTNET_TOOLS_FEED="https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/flat2"
          PACKAGE_URL="$DOTNET_TOOLS_FEED/$PACKAGE_NAME/$CURRENT_VERSION/$PACKAGE_NAME.$CURRENT_VERSION.nupkg"
          
          curl -f -L -o package.nupkg "$PACKAGE_URL"
          unzip -q package.nupkg
          
          # Extract commit SHA from .nuspec file
          START_SHA=$(grep -oP 'repository[^>]*commit="\K[a-f0-9]{40}' "$(find . -name "*.nuspec" -type f | head -n1)" | head -n1)
          
          cd - >/dev/null
          rm -rf "$TEMP_DIR"
          
          echo "start=$START_SHA" >> $GITHUB_OUTPUT

      - name: Get latest Roslyn build from Azure DevOps
        id: latest
        shell: bash
        run: |
          set -euo pipefail
          
          # Check if Azure DevOps PAT is configured
          if [ -z "${{ secrets.AZURE_DEVOPS_PAT }}" ]; then
            echo "Error: AZURE_DEVOPS_PAT secret is not configured"
            exit 1
          fi
          
          # Query Azure DevOps for the latest successful build from internal project
          AZDO_ORG="https://dev.azure.com/dnceng"
          PROJECT="internal"
          PIPELINE_ID="327"  # dotnet-roslyn-official pipeline ID
          
          # Create authorization header
          AUTH_HEADER="Authorization: Basic $(echo -n ':${{ secrets.AZURE_DEVOPS_PAT }}' | base64)"
          
          # Get the latest successful build from main branch
          BUILD_URL="$AZDO_ORG/$PROJECT/_apis/build/builds?definitions=$PIPELINE_ID&branchName=refs/heads/main&statusFilter=completed&resultFilter=succeeded&\$top=1&api-version=7.0"
          
          BUILD_INFO=$(curl -s -H "Accept: application/json" -H "$AUTH_HEADER" "$BUILD_URL")
          
          # Check if response is valid JSON and extract build information
          if ! echo "$BUILD_INFO" | jq empty 2>/dev/null; then
            echo "Error: Invalid response from Azure DevOps API"
            exit 1
          fi
          
          BUILD_ID=$(echo "$BUILD_INFO" | jq -r '.value[0].id // empty')
          END_SHA=$(echo "$BUILD_INFO" | jq -r '.value[0].sourceVersion // empty')
          BUILD_NUMBER=$(echo "$BUILD_INFO" | jq -r '.value[0].buildNumber // empty')
          
          if [ -z "$BUILD_ID" ] || [ "$BUILD_ID" = "null" ]; then
            echo "Error: Could not get build ID from response"
            exit 1
          fi
          
          # Download AssetManifests artifact to get the exact version
          ARTIFACT_URL="$AZDO_ORG/$PROJECT/_apis/build/builds/$BUILD_ID/artifacts?artifactName=AssetManifests&api-version=7.0"
          
          ARTIFACT_INFO=$(curl -s -H "Accept: application/json" -H "$AUTH_HEADER" "$ARTIFACT_URL")
          
          # Extract download URL
          DOWNLOAD_URL=$(echo "$ARTIFACT_INFO" | jq -r '.resource.downloadUrl // empty')
          
          if [ -z "$DOWNLOAD_URL" ] || [ "$DOWNLOAD_URL" = "null" ]; then
            # Try alternative URL format
            DOWNLOAD_URL="$AZDO_ORG/$PROJECT/_apis/build/builds/$BUILD_ID/artifacts?artifactName=AssetManifests&api-version=7.0&\$format=zip"
          fi
          
          # Download and extract AssetManifests
          TEMP_DIR=$(mktemp -d)
          cd "$TEMP_DIR"
          
          curl -f -s -L -H "$AUTH_HEADER" -o assetmanifests.zip "$DOWNLOAD_URL"
          unzip -q assetmanifests.zip || unzip -q -j assetmanifests.zip
          
          # Find and parse OfficialBuild.xml
          XML_FILE=$(find . -name "OfficialBuild.xml" 2>/dev/null | head -n1)
          
          if [ -z "$XML_FILE" ]; then
            XML_FILE=$(find . -name "*.xml" 2>/dev/null | head -n1)
          fi
          
          if [ -z "$XML_FILE" ]; then
            echo "Error: No XML files found in AssetManifests"
            exit 1
          fi
          
          # Extract version from the XML - try both packages in one regex
          VERSION=$(grep -oP 'Id="Microsoft\.CodeAnalysis(\.Common)?"[^>]*Version="\K[^"]+' "$XML_FILE" | head -n1)
          
          if [ -z "$VERSION" ]; then
            echo "Error: Could not extract version from XML"
            exit 1
          fi
          
          # Also verify commit from Build element
          COMMIT_FROM_XML=$(grep -oP '<Build[^>]*Commit="\K[^"]+' "$XML_FILE" | head -n1)
          if [ -n "$COMMIT_FROM_XML" ]; then
            END_SHA="$COMMIT_FROM_XML"
          fi
          
          cd - >/dev/null
          
          # Set output variables
          echo "end=$END_SHA" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "build_id=$BUILD_ID" >> $GITHUB_OUTPUT
          echo "build_url=$AZDO_ORG/$PROJECT/_build/results?buildId=$BUILD_ID" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          
          if [ "${{ steps.current.outputs.start }}" = "$END_SHA" ]; then
            echo "no_change=true" >> $GITHUB_OUTPUT
          fi

      - name: Clone roslyn for PR finder
        if: steps.latest.outputs.no_change != 'true'
        shell: bash
        run: |
          git clone --no-tags --filter=blob:none --depth=500 https://github.com/dotnet/roslyn.git roslyn

      - name: Auth settings
        if: steps.latest.outputs.no_change != 'true'
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$HOME/.roslyn-tools"
          
          JSON=$(printf '{"GitHubToken":"%s","DevDivAzureDevOpsToken":"","DncEngAzureDevOpsToken":""}' "${{ secrets.GITHUB_TOKEN }}")
          printf '%s' "$JSON" | base64 | tr -d '\n' > "$HOME/.roslyn-tools/settings"

      - name: Generate PR list
        id: prs
        if: steps.latest.outputs.no_change != 'true'
        shell: bash
        run: |
          set -euo pipefail
          pushd roslyn >/dev/null
          
          # Run pr-finder with VSCode label only
          if OUTPUT=$(roslyn-tools pr-finder \
            -s "${{ steps.current.outputs.start }}" \
            -e "${{ steps.latest.outputs.end }}" \
            --format changelog \
            --label VSCode 2>/dev/null); then
            if [ -z "$OUTPUT" ]; then
              echo "(no PRs with required labels)" > ../pr-changelog.txt
            else
              printf "%s\n" "$OUTPUT" > ../pr-changelog.txt
            fi
          else
            echo "(pr-finder failed)" > ../pr-changelog.txt
          fi
          
          popd >/dev/null
          
          # Check if we have actual PRs or just empty/error messages
          if grep -qE '^\((no PRs|pr-finder failed)\)' pr-changelog.txt; then 
            echo "empty=true" >> $GITHUB_OUTPUT
          else
            echo "empty=false" >> $GITHUB_OUTPUT
          fi

      - name: Update CHANGELOG and package.json
        id: update
        if: steps.latest.outputs.no_change != 'true' && steps.prs.outputs.empty != 'true'
        uses: actions/github-script@v7
        env:
          ROSLYN_VER: ${{ steps.latest.outputs.version }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { readFile, writeFile } = require('fs/promises');
            
            const CHANGELOG = 'CHANGELOG.md';
            const PR_FILE = 'pr-changelog.txt';
            const roslynVer = process.env.ROSLYN_VER || 'unknown';
            
            // Update package.json
            try {
              const pkg = JSON.parse(await readFile('package.json', 'utf8'));
              if (!pkg.defaults) pkg.defaults = {};
              
              const oldVersion = pkg.defaults.roslyn;
              if (oldVersion !== roslynVer) {
                pkg.defaults.roslyn = roslynVer;
                await writeFile('package.json', JSON.stringify(pkg, null, 2) + '\n');
              }
            } catch (err) {
              core.setFailed(`Failed to update package.json: ${err.message}`);
              return;
            }
            
            // Load PR list
            let prLines = [];
            try {
              const prContent = await readFile(PR_FILE, 'utf8');
              prLines = prContent
                .split(/\r?\n/)
                .filter(l => l.trim().length && !l.includes('[View Complete Diff'))
                .map(l => l.startsWith('*') ? `  ${l}` : `  * ${l}`);
            } catch (err) {
              core.warning(`Could not read ${PR_FILE}: ${err.message}`);
            }
            
            // Update CHANGELOG
            const content = await readFile(CHANGELOG, 'utf8');
            const lines = content.split(/\r?\n/);
            
            // Find first section and existing bump line
            let bumpLineIndex = -1;
            let firstHeaderIndex = lines.findIndex(l => /^# /.test(l));
            let nextHeaderIndex = lines.findIndex((l, i) => i > firstHeaderIndex && /^# /.test(l));
            let sectionEnd = nextHeaderIndex > 0 ? nextHeaderIndex : lines.length;
            
            for (let i = firstHeaderIndex + 1; i < sectionEnd; i++) {
              if (/^\* Bump Roslyn to .* \(PR:/.test(lines[i])) {
                bumpLineIndex = i;
                break;
              }
            }
            
            if (bumpLineIndex === -1) {
              core.setFailed('Could not find existing Roslyn bump line');
              return;
            }
            
            // Update bump line
            lines[bumpLineIndex] = `* Bump Roslyn to ${roslynVer} (PR: [#TBD](TBD))`;
            
            // Insert PR lines
            let insertPoint = bumpLineIndex + 1;
            while (insertPoint < lines.length && lines[insertPoint].startsWith('  *')) {
              insertPoint++;
            }
            
            if (prLines.length > 0) {
              lines.splice(insertPoint, 0, ...prLines);
            }
            
            await writeFile(CHANGELOG, lines.join('\n'));

      - name: Create PR
        if: steps.latest.outputs.no_change != 'true' && steps.prs.outputs.empty != 'true'
        id: cpr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: roslyn-bump/${{ steps.latest.outputs.end }}
          commit-message: "Bump Roslyn to ${{ steps.latest.outputs.version }}"
          title: "Bump Roslyn to ${{ steps.latest.outputs.version }}"
          add-paths: |
            CHANGELOG.md
            package.json
          body: |
            Automated Roslyn version bump.
            
            **Version:** `${{ steps.latest.outputs.version }}`
            **Commit Range:** `${{ steps.current.outputs.start }}....${{ steps.latest.outputs.end }}`
            **Azure DevOps Build:** [${{ steps.latest.outputs.build_id }}](${{ steps.latest.outputs.build_url }})
            
            See CHANGELOG.md for included PRs.

      - name: Backfill PR link in CHANGELOG
        if: steps.cpr.outputs.pull-request-number && steps.latest.outputs.no_change != 'true' && steps.prs.outputs.empty != 'true'
        shell: bash
        run: |
          set -euo pipefail
          
          PR_URL="${{ steps.cpr.outputs.pull-request-url }}"
          PR_NUM="${{ steps.cpr.outputs.pull-request-number }}"
          BRANCH="roslyn-bump/${{ steps.latest.outputs.end }}"
          
          git fetch origin "$BRANCH" --depth=1
          git checkout "$BRANCH"
          
          # Replace TBD placeholders with actual PR number and URL
          sed -i "s|#TBD|#$PR_NUM|" CHANGELOG.md
          sed -i "s|(TBD)|($PR_URL)|" CHANGELOG.md
          
          if git diff --quiet; then
            echo "No placeholder replacement occurred."
            exit 0
          fi
          
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add CHANGELOG.md
          git commit -m "Backfill PR link #$PR_NUM"
          git push origin "$BRANCH"